#The comments are generated by GPT's Don't blame me.

from flask import Flask, render_template, request, send_file, session, redirect, url_for, jsonify, make_response
import os
import tempfile
import uuid
import json
from roadmap_agent import RoadmapAgent
from file_text_utils import extract_text_from_file

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "your_secret_key_here")

# Serve favicon.ico
from flask import send_from_directory
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'favicon.ico', mimetype='image/vnd.microsoft.icon')

# Ensure reportlab is installed for PDF export
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.pdfgen import canvas
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "YOUR_GEMINI_API_KEY")
roadmap_agent = RoadmapAgent(GEMINI_API_KEY)

@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    pdf_path = None
    error = None
    if request.method == 'POST':
        resume_text = request.form.get('resume_text', '')
        resume_file = request.files.get('resume_file')
        if resume_file and resume_file.filename:
            try:
                resume_text = extract_text_from_file(resume_file)
            except Exception as e:
                error = f"Failed to extract text from resume file: {e}"
                resume_text = ''
        interview_summary_text = request.form.get('interview_summary_text', '')
        goals_text = request.form.get('goals_text', '')
        generate_pdf = REPORTLAB_AVAILABLE and (request.form.get('generate_pdf') == 'on')
        try:
            pdf_path = None
            user_pdf_path = None
            if generate_pdf:
                # Use a unique temp file for the PDF
                temp_dir = tempfile.gettempdir()
                user_pdf_path = os.path.join(temp_dir, f"roadmap_{uuid.uuid4().hex}.pdf")
                roadmap_data, roadmap_table, _ = roadmap_agent.generate_roadmap(
                    resume_text, interview_summary_text, goals_text, generate_pdf=False
                )
                # Generate PDF to user_pdf_path
                roadmap_agent.output_formatter.generate_pdf(roadmap_data, output_path=user_pdf_path)
                pdf_path = user_pdf_path
            else:
                roadmap_data, roadmap_table, _ = roadmap_agent.generate_roadmap(
                    resume_text, interview_summary_text, goals_text, generate_pdf=False
                )
            # Call agent method (classic, no reasoning trace)
            roadmap_data, roadmap_table, pdf_path = roadmap_agent.generate_roadmap(
                resume_text, interview_summary_text, goals_text, generate_pdf=generate_pdf
            )
            result = {
                'json': json.dumps(roadmap_data, indent=2),
                'table': roadmap_table,
                'pdf': pdf_path if pdf_path else None
            }
            # Store JSON and table in session for download endpoints
            session['roadmap_json'] = result['json']
            session['roadmap_table'] = result['table']
        except Exception as e:
            error = str(e)
    return render_template('index.html', result=result, error=error, reportlab=REPORTLAB_AVAILABLE)

@app.route('/download_pdf')
def download_pdf():
    import threading
    import time
    pdf_path = request.args.get('pdf_path')
    if pdf_path and os.path.exists(pdf_path):
        return send_file(pdf_path, mimetype='application/pdf', as_attachment=True, download_name='GenAI_Roadmap.pdf')
    return 'PDF not found', 404

@app.route('/download_json')
def download_json():
    roadmap_json = session.get('roadmap_json')
    if roadmap_json:
        response = make_response(roadmap_json)
        response.headers['Content-Type'] = 'application/json'
        response.headers['Content-Disposition'] = 'attachment; filename=roadmap.json'
        return response
    return 'No JSON data available', 404

@app.route('/download_csv')
def download_csv():
    roadmap_table = session.get('roadmap_table')
    if roadmap_table:
        response = make_response(roadmap_table)
        response.headers['Content-Type'] = 'text/csv'
        response.headers['Content-Disposition'] = 'attachment; filename=roadmap.csv'
        return response
    return 'No CSV data available', 404

if __name__ == '__main__':
    app.run(debug=True)
